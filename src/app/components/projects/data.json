{
    "projectData": [
        {
            "type": "Ongoing Projects",
            "projects": [
                {
                    "name": "Cake-Cutting Research Paper",
                    "date": "Since 12/25",
                    "description": "My algorithmic economics professor pitched me a problem, I solved it and we wrote a paper that got accepted to NeurIPS 2025. The paper introduced and analyzed a new class of fairness notions to a field of cake-cutting that aim to bridge the immense gaps in complexity of cake-cutting problems and algorithms.", 
                    "tools": "",
                    "img": "\nCitation:\n\nOn Hierarchies of Fairness Notions in Cake Cutting: From Proportionality to Super Envy-Freeness.\n\tArnav Mehra, Alexandros Psomas.\n\tIn the 39th Conference on Neural Information Processing Systems, NeurIPS 2025.",
                    "web_link": "https://arxiv.org/abs/2506.12950",
                    "github_link": ""
                },
                {
                    "name": "Unifier",
                    "date": "Since 4/24",
                    "description": "To challenge myself, I implemented unification (how prolog works) without references (purely my own design). Currently, it is capable of solving for some more basic compositions of relations, but through various optimizations, I hope to make it usable for type inference in A-Script.", 
                    "tools": "Scala",
                    "img": "assets/unification.PNG",
                    "web_link": "",
                    "github_link": "https://github.com/arnav-mehra/unification"
                },
                {
                    "name": "A-Script: Programming Language",
                    "date": "Since 1/24",
                    "description": "Crafting my own programming language in Scala. My goal with the project was not only to learn how programming languages are built, but make one thats tailored to my preferences and pretty fast. To do this, I am currently using optimizations like compile-to-closures and type-checking to create static types. In the future, I plan to add type inference, but only once my unification project is finished.", 
                    "tools": "Scala",
                    "img": "assets/a-script.PNG",
                    "web_link": "",
                    "github_link": "https://github.com/arnav-mehra/a-script"
                },
                {
                    "name": "A-Stack: Web Framework", 
                    "date": "Since 6/23",
                    "description": "A full-stack web framework I am building with performance in mind. It supports client-side rendering and static site generation. It also has a DSL made in Rust. Currently, I am working on the backend framework and an efficient build tool for the frontend.", 
                    "tools": "TypeScript, JavaScript, HTML, Node.js, Rollup, Rust, Pest",
                    "img": "assets/a-stack.PNG",
                    "web_link": "",
                    "github_link": "https://github.com/arnav-mehra/a-stack"
                },
                {
                    "name": "This Site", 
                    "date": "Since 1/22",
                    "description": "I hope you understood the joke! This is the site you are using right now. The background is Conway's Game of Life if you haven't noticed! Mistakenly written in Angular long ago, so I plan to rewrite this site in A-Stack once it is finished.", 
                    "tools": "Angular, React, SASS",
                    "img": "\nRecursionError: maximum recursion depth exceeded.",
                    "web_link": "https://arnavmehra.com/",
                    "github_link": "https://github.com/arnav-mehra/personal-site"
                },
                {
                    "name": "Chess Engine", 
                    "date": "Since 1/21",
                    "description": "A chess engine I have been developing on and off. All versions use bitboard representation and the mini-max algorithm with some cool enhancements (maybe I should try Monte Carlo tree search in the future?). Currently, V1 from 2021 is playable via the link. Meanwhile, V3 is still in development and will evaluate positions using an efficiently updateable neural network (NNUE).", 
                    "tools": "C++, Python, NumPy, Pandas, React, WASM",
                    "img": "assets/mychess.PNG",
                    "web_link": "https://my-chess-engine.netlify.app/",
                    "github_link": "https://github.com/arnav-mehra/mychess"
                }
            ]
        },
        {
            "type": "Past Projects",
            "projects": [
                {
                    "name": "Cake-Cutting Visualizer",
                    "date": "12/24 - 1/25",
                    "description": "A visualizer for Cake-Cutting Algorithms that shows step-by-step execution. Made as a possible learning tool for algorithms that are usually only given as pseudo-code.", 
                    "tools": "JavaScript, HTML, Tailwind CSS",
                    "img": "assets/cake-cutting-viz.png",
                    "web_link": "https://cake-cutting-sim.netlify.app/",
                    "github_link": "https://github.com/arnav-mehra/cake-cutting-sim"
                },
                {
                    "name": "L-System Visualizer", 
                    "date": "5/24 - 6/24",
                    "description": "Similar to Conway's Game of Life, L-systems are about producing complexity from a simple ruleset. In the case of L-systems, complexity emerges from the recursive expansion of string mappings. Most interestingly, when converted into basic turtle instructions produces fractals. For this visualizer, I created my own eDSL to specify the system and drawing rules, and used Three.js to display the result of the turtle drawing. Play around with it yourself below!", 
                    "tools": "Three.js, React.js",
                    "img": "assets/l-sys-viz.PNG",
                    "web_link": "https://l-sys-viz.netlify.app/",
                    "github_link": "https://github.com/arnav-mehra/l-system-visualizer"
                },
                {
                    "name": "Vector Program Synthesizer",
                    "date": "3/24 - 5/24",
                    "description": "Given sets of example input and output vectors drawn in a VR interface, it finds the closest matching program. To make it possible, we utilize bottom-up program generation, type pruning, duplicate program detection via random environment evaluation and locality-sensitive hashing, a novel metric for program error involving AST differentiation and gradient descent, and program complexity-based error scaling to account for Occam's razor.", 
                    "tools": "C#, Unity, VR",
                    "img": "assets/vsynth.mp4",
                    "web_link": "",
                    "github_link": "https://github.com/arnav-mehra/vsynth"
                },
                {
                    "name": "Nando: Circuit Simulator",
                    "date": "9/23 - 1/24",
                    "description": "Two projects, actually. One is a circuit simulator made in C++ that simulates an ALU. The other is a circuit builder and runner made with Solid.js with customizable logic gates and local save capabilities via IndexedDB. I had planned to compile the C++ to WASM and use that instead of the JavaScript simulator, but am not too keen on this for the time being.", 
                    "tools": "C++, Solid.js, IndexedDB",
                    "img": "assets/nando-sim.PNG",
                    "web_link": "https://nando-sim.netlify.app/",
                    "github_link": "https://github.com/arnav-mehra/nando"
                },
                {
                    "name": "Abseil Hash Map", 
                    "date": "7/23 - 9/23",
                    "description": "Implemented the hash map library used internally by Google in Rust, utilizing some cool optimizations like Swiss Tables and SIMD instructions.", 
                    "tools": "Rust, Criterion",
                    "img": "",
                    "web_link": "",
                    "github_link": "https://github.com/arnav-mehra/abseil-flat-hash"
                },
                {
                    "name": "Townie: Web Game", 
                    "date": "1/23 - 4/23",
                    "description": "A mobile web game where players explore new destinations in the form of a competitive scavenger hunt. This was a group project (4 others) and I was responsible for UI design, stack, and architecture. I worked on features including: live game updates and chat via WebSockets, in-game maps via Mapbox, Stripe integration for premium subscriptions, and auth via JSON Web Token and Twilio 2FA. You can check out the live version via the link.", 
                    "tools": "Svelte, Django, ArangoDB, Mapbox, Stripe, Twilio, AWS (Lambda, API Gateway: WebSocket API, EC2), Redis",
                    "img": "assets/townie.PNG",
                    "web_link": "https://townie-game.vercel.app/",
                    "github_link": ""
                },
                {
                    "name": "RN-Graph: Graph Visualizer", 
                    "date": "7/23-8/23",
                    "description": "A node graph visualization library for react native. This was originally made for Purdue SigApp's Course Checker app, and is now a npm package.", 
                    "tools": "React Native",
                    "img": "assets/rn-graph.png",
                    "web_link": "https://www.npmjs.com/package/rn-graph",
                    "github_link": "https://github.com/arnav-mehra/rn-graph"
                },
                {
                    "name": "Drawtic Phone: Web Game",
                    "date": "1/23 - 1/23",
                    "description": "A project for Purdue's BoilerMake hackathon that made it into the finalists (top 10). This is a web game similar to Gartic Phone where players draw mid-air over their camera frame. Due to the poor performance of using MediaPipe in the browser, we have not hosted it yet, but see model web optimization as a potential future project.", 
                    "tools": "React, Google MediaPipe, Flask, Redis, AWS S3",
                    "img": "assets/drawtic.PNG",
                    "web_link": "https://devpost.com/software/drawticphone",
                    "github_link": "https://github.com/arefmalek/drawticphone"
                },
                {
                    "name": "Data Mine: Corporate Partners",
                    "date": " 1/22 - 5/22",
                    "description": "Performed data analysis on American First Finance company data using Pandas, Matplotlib, and scikit-learn in Python. One of the main things I worked on was training linear regression and nearest neighbor models to predict how long a client would continue using their financing options based on their current financial conditions. Ultimately, this provided a choropleth map visualization for gauging underperforming regions and client lifetime value.", 
                    "tools": "Python, Pandas, Matplotlib, Scikit-learn",
                    "img": "assets/aff.mp4",
                    "web_link": "https://datamine.purdue.edu/corporate/americanfirstfinance/tdm_symposium2022_poster_american_first_finance.pdf",
                    "github_link": ""
                },
                {
                    "name": "HSE Safety: Web App", 
                    "date": "12/20 - 1/21",
                    "description": "For this project, I collaborated with my school's administration to plan and build a system for staff to quickly access safety procedure data. This involved building a table of contents (seen in the image) to a large PDF, a way to search safety routes and procedure by classroom, and search administration roles and contacts.", 
                    "tools": "React, Ant Design, Express.js, Node.js, MongoDB, React-PDF",
                    "img": "assets/hsesafe.PNG",
                    "web_link": "",
                    "github_link": ""
                },
                {
                    "name": "HSE Courses: Web App", 
                    "date": "11/20 - 5/21",
                    "description": "This is the project that hooked me on software development. My high school used to have students fill out course requests on paper, and advisors would manually review them (often missing details and causing issues for students). So, using the MERN stack, I decided to develop an app to enhance course searching, planning, and diploma requirement matching for students. In its first year of use, it hit over 500 users, and received very positive feedback.", 
                    "tools": "React, Ant Design, Express.js, Node.js, MongoDB",
                    "img": "assets/hsecourse.PNG",
                    "web_link": "https://hsecourses.app/",
                    "github_link": ""
                }
            ]
        }
    ]
}